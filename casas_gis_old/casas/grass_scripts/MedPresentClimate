#!/bin/sh

############################################################################
#
# MODULE:       MedPresentClimate (Windows native version)
#
# AUTHOR(S):    Luigi Ponti quartese gmail com
#
# PURPOSE:      Import ASCII output files from CASAS models
#               to a GRASS monitor after interpolation and
#               save the map to an image file (currently png).
#
# NOTE:         This version supports outfiles with names of
#               type "Olive_02Mar06_00003.txt".
#               Voronoi part was reimplemented as in Mediterraneo
#               and flag -s removed because no longer used.
#
# Copyright:    (c) 2005-2012 CASAS Global (Center for the Analysis
#               of Sustainable Agricultural Systems)
#               https://www.casasglobal.org/).
#
#               SPDX-License-Identifier: GPL-2.0-or-later
#
############################################################################

# fail on error
set -e

# Set some environmental variables
export CASAS_HOME="${HOME}/software/casas-gis/casas_gis_old/"
export PERLSCRIPTS="${CASAS_HOME}/PerlScripts"
export OUTFILES="${CASAS_HOME}/outfiles"
export PALETTES="${CASAS_HOME}/palettes"
export FONTDIR='C:\Windows\Fonts\'

# Directory with temporary files (created by the convert.pl script).
DIRTMP="${CASAS_HOME}/models_temp/"

export GRASS_OVERWRITE=1
# export GRASS_VERBOSE=1

### GRASS parser section
# %Module
# % description: Map output of CASAS PBDMs for Mediterranean Basin
# % keywords: GlobalChangeBiology project
# % keywords: GRASS GIS
# % keywords: physiologically based demographic models (PBDM)
# % keywords: olive
# % keywords: agroecosystem analysis
# %End

# %option
# % guisection: Main
# % key: save_directory
# % type: string
# % description: Name for directory where to store output maps
# % required: yes
# %end

# %option
# % guisection: Main
# % key: longitude
# % type: integer
# % answer: 5
# % description: Longitude (X) column number
# % required: yes
# %end

# %option
# % guisection: Main
# % key: latitude
# % type: integer
# % answer: 6
# % description: Latitude (Y) column number
# % required: yes
# %end

# %option
# % guisection: Main
# % key: year
# % type: integer
# % answer: 11
# % description: Year column number
# % required: yes
# %end

# %option
# % guisection: Main
# % key: parameter
# % type: integer
# % description: Parameter to map
# % required: yes
# %end

# %option
# % guisection: Main
# % key: interpolation
# % type: string
# % options: idw,bspline
# % answer: idw
# % description: Interpolation method
# % required: yes
# %end

# %option
# % key: lowercut
# % type: double
# % answer: 0
# % description: Cutting point to mask low values
# % required: yes
# %end

# %option
# % key: uppercut
# % type: double
# % answer: 0
# % description: Cutting point to mask high values (please, also check option below)
# % required: yes
# %end

# %option
# % guisection: Main
# % key: legend1
# % type: string
# % description: Text for legend - first line (file name of HTML summary)
# % required: yes
# %end

# %option
# % key: region
# % type: string
# % answer: 21 22 23 25 31 32 33 35
# % description: FAO ecological regions (separated by space). Use -1 to map whole region
# % multiple: yes
# % required: yes
# %end

# %option
# % key: alt
# % type: double
# % answer: 900
# % description: Altitude (meters) above which to clip
# % required: yes
# %end

# %option
# % key: resolution
# % type: integer
# % options: 1,2,4
# % answer: 1
# % description: Resolution of output figure (single=1, double=2, quad=4) relative to computational region
# % required: yes
# %end

# %option
# % guisection: Color rules
# % key: color_rule_divergent
# % type: string
# % answer: 32:96:255-32:159:255-32:191:255-0:207:255-42:255:255-85:255:255-127:255:255-170:255:255-255:255:84-255:240:0-255:191:0-255:168:0-255:138:0-255:112:0-255:77:0-255:0:0
# % description: Select or input a DIVERGENT color pattern (hyphen-separated) using standard GRASS colors (see r.colors manual page for color names) or R:G:B triplets
# %end

# %option
# % guisection: Color rules
# % key: color_rule_regular
# % type: string
# % answer: 0:0:255-0:64:255-0:128:255-0:191:255-0:255:255-0:255:255-0:255:223-0:255:159-0:255:74-0:255:0-74:255:0-159:255:0-223:255:0-255:255:0-255:255:0-255:191:0-255:128:0-255:64:0-255:0:0
# % description: Select or input a REGULAR color pattern (hyphen-separated) using standard GRASS colors (see r.colors manual page for color names) or R:G:B triplets
# %end

# %option
# % guisection: Color rules
# % key: low_bar_col
# % type: double
# % description: Lower limit for legend color bar when -w option is enabled
# %end

# %option
# % guisection: Color rules
# % key: up_bar_col
# % type: double
# % description: Upper limit for legend color bar when -w option is enabled
# %end

# %flag
# % guisection: Color rules
# % key: w
# % description: Modify extent of legend color bar (using low and high input values)
# %end

# %flag
# % guisection: Color rules
# % key: g
# % description: Black and white output instead of color
# %end

# %flag
# % guisection: Color rules
# % key: e
# % description: Use histogram-equalized color rule
# %end

# %flag
# % guisection: Color rules
# % key: l
# % description: Logarithmic scaling
# %end

# %flag
# % guisection: Color rules
# % key: x
# % description: Use an overall (compound) range for all maps (absolute max and min)
# %end

# %flag
# % guisection: Color rules
# % key: a
# % description: Use also same legend bar for all maps (i.e. bar will extend to overall max and min)
# %end

# %flag
# % guisection: Color rules
# % key: d
# % description: Use divergent, zero-centered color pattern (requires positive max and negative min)
# %end

# %flag
# % key: u
# % description: Use cutting point to mask high values
# %end

# %flag
# % key: c
# % description: Do not interpolate stations above clipping altitude
# %end

# %flag
# % key: r
# % description: Write a report with raster statistics
# %end

# %flag
# % key: p
# % description: Produce barchart plots summarizing raster statistics
# %end

# %flag
# % key: m
# % description: Map only inside olive growing area
# %end


# Cleanup routine.
cleanup() {
    # Remove temp directory.
    \rm -rf $DIRTMP
    # Remove temp text files.
    \rm -f ${OUTFILES}/clipRegion.txt
    \rm -f ${OUTFILES}/formula*.txt
    \rm -f ${OUTFILES}/voronoi.txt
    \rm -f ${OUTFILES}/legend*.txt
    \rm -f ${OUTFILES}/year*.txt
    \rm -f ${OUTFILES}/inputPar.txt
    \rm -f ${OUTFILES}/weather.txt
    \rm -f ${PALETTES}/customColorRule.txt
    \rm -f ${OUTFILES}/min.txt
    \rm -f ${OUTFILES}/max.txt
    \rm -f ${OUTFILES}/states.txt
    # Remove gis temp files in latlong location
    g.mapset mapset=luigi project=latlong
    g.remove -f --q type=vector pattern="map*"
    # Remove gis temp files in mapping location
    g.mapset mapset=luigi project=AEA_Med
    g.remove -f --q type=vector pattern="voronoi*"
    g.remove -f --q type=raster,vector pattern="map*"
    g.remove -f --q type=raster pattern="model*"
    g.remove -f --q type=raster pattern="Mskd*"
    g.remove -f --q type=raster pattern="interpol*"
    # Remove old masks.
    g.remove -f --q type=vector pattern="Eto*"
    g.remove -f --q type=raster pattern="Elev*"
    g.remove -f --q type=raster pattern="Eto*"
    g.remove -f --q type=raster pattern="MASK*"
}

# In case of user break:
exitprocedure() {
    echo 'User break!' >&2
    cleanup
    echo 'Cleaning up temporary files...' >&2
    d.mon stop=png
    exit 1
}

# Check for user break (signal list: trap -l)
trap 'exitprocedure' 1 2 3 15

# Print column names of model output files.
perl ${PERLSCRIPTS}/printCols.pl "${CASAS_HOME}" > ${CASAS_HOME}/varList.txt

if [ "$1" != "@ARGS_PARSED@" ]; then
    exec g.parser "$0" "$@"
fi

if test "$GISBASE" = ""; then
    echo 'You must be in GRASS GIS to run this program.' >&2
    exit 1
fi

# Perform initial cleanup.
cleanup

# Set user-defined directory "save_directory" where to save
# output maps.
SaveDir="${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY"
if [ -n "$SaveDir" ]; then
    if [ -d "$SaveDir" ]; then
        echo ""
        echo "The directory <$SaveDir> already exists."
        echo "Please, choose a different name."
        echo ""
        exit 1
    else
        mkdir -p "$SaveDir"
    fi
fi

# Set user-defined X, Y, mapping parameter, etc.
if [ -n "$GIS_OPT_LONGITUDE" ]; then
    LON="$GIS_OPT_LONGITUDE"
fi

if [ -n "$GIS_OPT_LATITUDE" ]; then
    LAT="$GIS_OPT_LATITUDE"
fi

if [ -n "$GIS_OPT_YEAR" ]; then
    YEAR="$GIS_OPT_YEAR"
fi

if [ -n "$GIS_OPT_PARAMETER" ]; then
    PAR="$GIS_OPT_PARAMETER"
fi

if [ -n "$GIS_OPT_INTERPOLATION" ]; then
    SURF="$GIS_OPT_INTERPOLATION"
fi

if [ -n "$GIS_OPT_LOWERCUT" ]; then
    CUT="$GIS_OPT_LOWERCUT"
fi

if [ -n "$GIS_OPT_UPPERCUT" ]; then
    HICUT="$GIS_OPT_UPPERCUT"
fi

if [ -n "$GIS_OPT_LEGEND1" ]; then
    LEG1="$GIS_OPT_LEGEND1"
fi

if [ -n "$GIS_OPT_REGION" ]; then
    REG="$GIS_OPT_REGION"
fi

if [ -n "$GIS_OPT_ALT" ]; then
    ALT="$GIS_OPT_ALT"
fi

if [ -n "$GIS_OPT_RESOLUTION" ]; then
    FIGRES="$GIS_OPT_RESOLUTION"
fi

if [ -n "$GIS_OPT_COLORRULEDIVERGENT" ]; then
    RULE_DIV="$GIS_OPT_COLORRULEDIVERGENT"
fi

if [ -n "$GIS_OPT_COLORRULEREGULAR" ]; then
    RULE_REG="$GIS_OPT_COLORRULEREGULAR"
fi

if [ -n "$GIS_OPT_LOWBARCOL" ]; then
    LOWBARCOL="$GIS_OPT_LOWBARCOL"
fi

if [ -n "$GIS_OPT_UPBARCOL" ]; then
    UPBARCOL="$GIS_OPT_UPBARCOL"
fi

# Write LON, LAT, and PAR to a text file as input for the perl script
echo "$LON $LAT $PAR $YEAR" > ${CASAS_HOME}/inputPar.txt

# Print years to text files for use in legend.
perl ${PERLSCRIPTS}/printYear.pl "${CASAS_HOME}"

# Run a perl script that gets rid of column names
perl ${PERLSCRIPTS}/convertITA.pl "${CASAS_HOME}"

# Do we want to use the same legend range for all maps?
if [ "$GIS_FLAG_X" -eq 1 ]; then
    # In case we want to use divergent color scheme.
    if [ "$GIS_FLAG_D" -eq 1 ]; then
        # Check if there is an upper cutting point set.
        if [ "$GIS_FLAG_U" -eq 1 ]; then
            perl ${PERLSCRIPTS}/multiColorRule.pl "${CASAS_HOME}" "$RULE_DIV" "$CUT" "$HICUT" "divYes"
        # Otherwise just use the lower cutting point.
        elif [ "$GIS_FLAG_U" -eq 0 ]; then
            perl ${PERLSCRIPTS}/multiColorRule.pl "${CASAS_HOME}" "$RULE_DIV" "$CUT" "na" "divYes"
        fi
    # Same range for all maps with regular color scheme.
    elif [ "$GIS_FLAG_D" -eq 0 ]; then
        # Check if there is an upper cutting point set.
        if [ "$GIS_FLAG_U" -eq 1 ]; then
            perl ${PERLSCRIPTS}/multiColorRule.pl "${CASAS_HOME}" "$RULE_REG" "$CUT" "$HICUT" "divNo"
        # Otherwise just use the lower cutting point.
        elif [ "$GIS_FLAG_U" -eq 0 ]; then
            perl ${PERLSCRIPTS}/multiColorRule.pl "${CASAS_HOME}" "$RULE_REG" "$CUT" "na" "divNo"
        fi
    fi
fi

# Set environmental variables to import location.
g.mapset mapset=luigi project=latlong

# Import model output table into a GRASS vector.
cd $DIRTMP
for i in $(ls); do
    echo "importing $i ..."
    v.in.ascii input=$i output=$(echo map$i | tr -s '.' '_') separator='\t' x=1 y=2 z=0
    wait

    # Check for column type of parameter to map.
    if [ -n "$(v.info -c map=map$i | grep dbl_3)" ]; then
        varType=dbl_3
    else
        varType=int_1
    fi
done
wait

# Change to GRASS location where MED maps are.
g.mapset mapset=luigi project=AEA_Med

# Define the extent of the map and its grid resolution (currently 3 km).
g.region -a n=900000 s=-930000 e=2050000 w=-2343000 res=3000
#~ Old region g.region -a n=1100000 s=-950000 e=2300000 w=-2343000 res=3000

# Build a mask to select the region of interest to the study
# based on FAO ecological regions. If -1 value is given, whole
# region is used.

# Interpolation mask may be olive growing area...
if [ "$GIS_FLAG_M" -eq 1 ]; then
    # Get mask to clip sites with elevation over $ALT
    # and outside selected ecological regions.
    r.mapcalc 'ElevMask = if (olive_groves_new_raster_masked_below900, era40dem_resamp, null())'
    r.mapcalc "ElevAltMask = if (ElevMask < $ALT, ElevMask, null())"
    # Previous olive growing area: olive_density_contour_area_masked
else
    if [ "$REG" == "-1" ]; then
        v.to.rast input=ecoZonesFaoEra40 output=EtoSelectMask use=val value=1
        # Get mask to clip sites with elevation over $ALT
        g.copy raster=era40dem_resamp,ElevMask
        r.mapcalc "ElevAltMask = if (ElevMask < $ALT, ElevMask, null())"
    else
        echo $REG > ${CASAS_HOME}/clipRegion.txt
        perl ${PERLSCRIPTS}/cliparse_TC.pl ${CASAS_HOME} "GEZ_CODE" 'number' "clipRegion.txt" "formula.txt"
        v.extract input=ecoZonesFaoMedOlive output=EtoSelect where="$(cat ${CASAS_HOME}/formula.txt)"
        v.to.rast input=EtoSelect output=EtoSelectMask use=val value=1
        # Get mask to clip sites with elevation over $ALT
        # and outside selected ecological regions.
        r.mapcalc 'ElevMask = if (EtoSelectMask, era40dem_resamp, null())'
        r.mapcalc "ElevAltMask = if (ElevMask < $ALT, ElevMask, null())"
    fi
fi

# Write header in the log file (avoiding white space in filename).
LEG1FILE=`echo ${LEG1} | tr -s ' ' '_'`
mkdir -p "$SaveDir"
echo "This log reports names of input files used for analysis:" | tee -a "$SaveDir/${LEG1FILE}.log"

# Retrieve range min and max values for possible use in legend drawing.
# The min + max files are generated by the script ${PERLSCRIPTS}/multiColorRule.pl is only called in the following cases:
#  - When the -x flag is set, indicating the use of an overall range for all maps.
#  - When the -x flag is not set, but this script still needs to set color rules based on the -d flag (divergent color pattern) and the -u flag (use cutting point to mask high values).

# Check if min.txt exists before reading
if [ -f "${CASAS_HOME}/min.txt" ]; then
    min=$(cat "${CASAS_HOME}/min.txt")
else
    echo "Warning: ${CASAS_HOME}/min.txt does not exist."
    min="undefined"
fi

# Check if max.txt exists before reading
if [ -f "${CASAS_HOME}/max.txt" ]; then
    max=$(cat "${CASAS_HOME}/max.txt")
else
    echo "Warning: ${CASAS_HOME}/max.txt does not exist."
    max="undefined"
fi

# Set size of output image.

# Start interpolation process.
cd $DIRTMP
eval $(g.region -g)
# https://grass.osgeo.org/grass-stable/manuals/variables.html#list-of-selected-grass-environment-variables-for-rendering
# https://grass.osgeo.org/grass-stable/manuals/pngdriver.html
export GRASS_RENDER_FILE_READ=TRUE
export GRASS_RENDER_WIDTH=$((cols * FIGRES))
# export GRASS_RENDER_HEIGHT=$(( ( rows + 260  ) * FIGRES ))
export GRASS_RENDER_HEIGHT=$(((rows * 137 * FIGRES) / 100))
### export GRASS_RENDER_IMMEDIATE=cairo  # or: png, or: d.mon png, used below
export GRASS_RENDER_TRUECOLOR=TRUE

# Choose a font for figure text.
export GRASS_FONT='/usr/share/fonts/msttcore/arial.ttf'

# d.erase
n=1
# TODO: improve `ls` part: limit to files of interest
for i in $(ls); do
    # Reproject imported model vectors to current location.
    echo "reprojecting map$i ..."
    v.proj input=map$i project=latlong mapset=luigi output=map$i
    wait

    # Add a column to vector containing altitudes uploaded from raster DEM.
    v.db.addcolumn map=map$i columns="elevation REAL"
    wait
    v.what.rast map=map$i raster=era40dem_resamp column="elevation"
    wait

    # Extract vector points greater than cutting point, since
    # some values (e.g., bloom day <= 0) may be of little or no meaning.
    if [ "$GIS_FLAG_C" -eq 1 ]; then
        if [ "$GIS_FLAG_U" -eq 1 ]; then
            # Do not use points > altitude and >= upper cutting point for interpolation.
            v.extract input=map$i output=mapPos$i \
                where="($varType >= $CUT) AND ($varType <= $HICUT) AND (elevation < $ALT)"
        else
            # Exclude from interpolation only points > altitude cutting point.
            v.extract input=map$i output=mapPos$i \
                where="($varType >= $CUT) AND (elevation < $ALT)"
        fi
    elif [ "$GIS_FLAG_C" -eq 0 ]; then
        if [ "$GIS_FLAG_U" -eq 1 ]; then
            # Use only upper and lower cutting points - no exclusion based on altitude.
            v.extract input=map$i output=mapPos$i \
                where="($varType >= $CUT) AND ($varType <= $HICUT)"
        else
            # Use only lower cutting point - no exclusion based on altitude.
            v.extract input=map$i output=mapPos$i \
                where="($varType >= $CUT)"
        fi
    fi
    wait
    # Extract points lower than cutting point to map them with a different symbol.
    v.extract input=map$i output=mapZero$i \
        where="($varType < $CUT)"
    wait
    # Extract points higher than upper cutting point to map them with a different symbol.
    v.extract input=map$i output=mapHigh$i \
        where="($varType > $HICUT)"
    wait
    # Obtain Voronoi polygons from points to mask values
    #  above/below cutting points and select the right polygons.
    v.voronoi input=map$i output=voronoi
    v.category option=print input=mapZero$i > ${CASAS_HOME}/voronoi.txt
    # Check if high values are to be masked.
    if [ "$GIS_FLAG_U" -eq 1 ]; then
        v.category option=print input=mapHigh$i >> ${CASAS_HOME}/voronoi.txt
    fi
    perl ${PERLSCRIPTS}/voroparse.pl "${CASAS_HOME}"
    #~ v.extract input=voronoi output=voronoiSel\
    #~ where="`cat ${CASAS_HOME}/voronoiFormula.txt`"; wait;
    # Version without DB query.
    v.extract input=voronoi output=voronoiSel file=${CASAS_HOME}/voronoi.txt

    # Transform selected Voronoi polygons to raster for masking.
    v.to.rast input=voronoiSel output=MskdBuffer$i use=val value=1

    # Set mask for interpolation.
    g.copy raster=ElevAltMask,MASK

    if [ $SURF == "idw" ]; then
        # Interpolate the reprojected vector after proper masking by
        # elevation and administrative regions.
        # v.to.rast may be appropriate with PROTHEUS data.
        v.surf.idw -n input=mapPos$i output=interpol$i npoints=3 layer=1 col=$varType # Removed -n flag
    else
        # https://lists.osgeo.org/pipermail/grass-user/2010-February/054868.html
        v.surf.bspline input=mapPos$i raster=interpolNoMask$i sie=69780 sin=69780 method=bicubic lambda_i=0.05 layer=1 column=$varType
        r.mapcalc "interpol$i = if(ElevAltMask, interpolNoMask$i, null())"
    fi

    # Remove MASK that would otherwise prevent full map display.
    g.remove -f --q type=raster name=MASK
    wait
    # Remove stuff outside cutting points from interpolated raster.
    if [ -n "$(cat ${CASAS_HOME}/voronoi.txt)" ]; then
        r.mapcalc "MskdBufRev$i = if(isnull(MskdBuffer$i), 1, null())"
        r.mapcalc "MskdModPOS$i = if(MskdBufRev$i, interpol$i, null())"
    else
        g.copy raster=interpol$i,MskdModPOS$i
    fi

    # Set png file for output.
    export GRASS_RENDER_FILE="$SaveDir"/"$i".png
    d.mon -l 2> /dev/null | grep png && d.mon stop=png # in case the previous model run failed
    d.mon start=png
    d.erase

    # Remove voronoi-related stuff.
    \rm -f ${CASAS_HOME}/voronoi*.txt
    g.remove -f --q type=vector pattern="voronoi*"

    # If flag -g is checked, output is a greyscale figure
    if [ "$GIS_FLAG_G" -eq 1 ]; then
        # Set color table for interpolated raster
        # Do we want to use the same legend range for all maps?
        # No way to find a suitable divergent grayscale palette...
        # ...using color palettes (just a stub).
        if [ "$GIS_FLAG_X" -eq 1 ]; then
            if [ "$GIS_FLAG_E" -eq 1 ]; then
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -e -g map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                else
                    r.colors -e map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                fi
            else
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -g map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                else
                    r.colors map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                fi
            fi
        else
            if [ "$GIS_FLAG_E" -eq 1 ]; then
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -e -g map=MskdModPOS$i rules=${PALETTES}/greyColorRule
                else
                    r.colors -e map=MskdModPOS$i rules=${PALETTES}/greyColorRule
                fi
            else
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -g map=MskdModPOS$i rules=${PALETTES}/greyColorRule
                else
                    r.colors map=MskdModPOS$i rules=${PALETTES}/greyColorRule
                fi
            fi
        fi
        #~ d.rast map=era40_67_270_10_grow
        d.rast -o map=MskdModPOS$i
        d.vect map=admin0_10m_naturalEarth_MED type=boundary width=4
        d.grid -wn size=5:0:0 color=black bordercolor=black
    else
        # If flag -g is not checked, output is a color figure
        # Set color table for interpolated raster
        if [ "$GIS_FLAG_X" -eq 1 ] || [ "$GIS_FLAG_D" -eq 1 ]; then
            if [ "$GIS_FLAG_E" -eq 1 ]; then
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -e -g map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                else
                    r.colors -e map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                fi
            else
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -g map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                else
                    r.colors map=MskdModPOS$i rules=${PALETTES}/customColorRule.txt
                fi
            fi
        else
            if [ "$GIS_FLAG_E" -eq 1 ]; then
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -e -g map=MskdModPOS$i rules=${PALETTES}/defaultColorRule
                else
                    r.colors -e map=MskdModPOS$i rules=${PALETTES}/defaultColorRule
                fi
            else
                if [ "$GIS_FLAG_L" -eq 1 ]; then
                    r.colors -g map=MskdModPOS$i rules=${PALETTES}/defaultColorRule
                else
                    r.colors map=MskdModPOS$i rules=${PALETTES}/defaultColorRule
                fi
            fi
        fi
        # Overlay model raster to a shaded relief and add state
        # boundaries, weather stations, etc.
        # r.neighbors 21x21 window with circular neighborood (i.e. -c flag) on the original DEM.
        # Then the output DEM was cropped via r.mapcalc
        # newShade = "if(OriginalDem, OldShade, null())". The shaded relief
        # r.shaded.relief 67/270/10 - done following an idea
        # from http://www.pdcarto.com/mtncarto02/GRASS.htm
        # https://mountaincartography.icaci.org/mt_hood/pdfs/dunlavey2.pdf

        # Drape model raster over a shaded relief and add state
        # boundaries, lakes, weather stations, etc.
        d.his i=era40_67_270_10_grow h=MskdModPOS$i
        #~ d.vect map=waterareas type=boundary,area \
        color=0:255:255 fcolor=190:255:255
        d.vect map=admin0_10m_naturalEarth_MED type=boundary width=2
        d.grid -wn size=5:0:0 color=black bordercolor=black
    fi

    # Display a legend for model raster with screen
    # coordinates as % of screen (bottom,top,left,right).
    if [ "$GIS_FLAG_A" -eq 1 ] && [ "$GIS_FLAG_X" -eq 1 ]; then
        d.legend -s raster=MskdModPOS$i color=black lines=0 thin=1000 labelnum=5 at=6,11,20,80 range="$min","$max" # absolute range.
        # Restrict width of color legend bar.
    elif [ "$GIS_FLAG_W" -eq 1 ]; then
        d.legend -s raster=MskdModPOS$i color=black lines=0 thin=1000 labelnum=5 at=6,11,20,80 range="$LOWBARCOL","$UPBARCOL" # modified range.
    else
        d.legend -s raster=MskdModPOS$i color=black lines=0 thin=1000 labelnum=5 at=6,11,20,80 # range=34.02170,2717.63107 # exclude outliers.
        # legend range relative to current map. Old horizontal legend location 10,13.5,10,90

        # To exclude outliers from legend, the range=min,max option in d.legend
        # needs to be enabled in the GIS script MedPresentClimate using
        # the two whiskers of the R box plot (see boxplot.stats() in R).

    fi
    # It is possible to implement user-defined categories
    # by adding: "use=1000,100,10,0,-10,-100,-1000".

    # Display scale bar.
    # d.barscale at=50,7

    # Display true type font text in the legend (at x-y, lower-left coordinates).
    echo "$LEG1" > ${CASAS_HOME}/legend1.txt

    Legend1="$(cat ${CASAS_HOME}/legend1.txt)"
    Year="$(cat ${CASAS_HOME}/year$n.txt)"
    echo $Legend1 $Year > ${CASAS_HOME}/legend1$n.txt
    # Text for legend (at= percentage, [0,0] is top left).
    d.text size=5 color=black at=5,91 input=${CASAS_HOME}/legend1$n.txt

    # Save display to .png file (increasing resolution (res) = 1, 2, or 4)
    # d.out.file output="$SaveDir"/"$i" res=$FIGRES format=png
    #~ d.out.file output="$SaveDir"/"$i" res=$FIGRES format=eps
    # Save display to .png file.
    d.mon stop=png
    # Write a log with names of input files.
    echo "$i" | tee -a "$SaveDir/${LEG1FILE}.log"

    ###############
    # Raster statistics here  #    # Maybe do a test mapping cycle beforehand.
    ##############

    # Raster statistics based on vector areas; histogram by vector areas; what else?

    # If flag -r is checked, then write raster statistics.
    if [ "$GIS_FLAG_R" -eq 1 ]; then
        r.report -en map=regioni_istat,MskdModPOS$i units=k,p nsteps=4 > "$SaveDir/$i.txt"
        r.univar map=MskdModPOS$i | tee -a "$SaveDir/$i.txt"
        if [ $n -eq 1 ]; then
            echo 'There is no stat report for weather stations!' > "$SaveDir"/WeatherStations.txt
            if [ "$GIS_FLAG_P" -eq 1 ]; then
                Plots=1
            else
                Plots=0
            fi
        fi
    else
        if [ $n -eq 1 ]; then
            echo 'There is no stat report for weather stations!' > "$SaveDir"/WeatherStations.txt
            if [ "$GIS_FLAG_P" -eq 1 ]; then
                Plots=1
            else
                Plots=0
            fi
        fi
        echo 'Sorry, no stat report was requested for this analysis.' > "$SaveDir/$i.txt"
    fi

    # If flag -p is checked, then write .rep report files to be plotted.
    if [ "$GIS_FLAG_P" -eq 1 ]; then
        # Not working for now since G6 r.stats is buggy. -- check for G8
        #~ r.stats -anr input=MskdModPOS$i fs=tab nsteps=4 > "$SaveDir"/$i.tot
        #~ r.stats -anr input=regioni_istat,MskdModPOS$i fs=tab nsteps=4 > "$SaveDir"/$i.rep
        GRASS_RENDER_FILE="$SaveDir/$i-HIST.png"
        export GRASS_RENDER_FILE
        d.mon start=png
        d.erase
        d.histogram map="MskdModPOS$i"
        d.mon stop=png
        # d.out.file output="$SaveDir"/"$i"-HIST res=$FIGRES format=png
        #~ d.out.file output="$SaveDir"/"$i"-HIST res=$FIGRES format=eps
    fi

    # Remove temporary ascii files produced by PERL script "convert.pl".
    rm $i

    let n++
done

# Write date in the log file.
echo "($(date -R | tr -s ' ' ' '))" | tee -a "$SaveDir/${LEG1}${LEG2}.log"

# Display & save a map with weather stations used for analysis.
# If flag -g is checked, output is a greyscale figure (no lakes)
if [ "$GIS_FLAG_G" -eq 1 ]; then
    # Set png file for output.
    GRASS_RENDER_FILE="$SaveDir/WeatherStations.png"
    export GRASS_RENDER_FILE
    d.mon start=png
    d.erase

    d.rast map=era40_67_270_10_grow
    d.vect map=admin0_10m_naturalEarth_MED type=boundary width=2
    #~ d.vect map=map$i display=shape icon=basic/point size=5 layer=1\
    #~ color=255:255:255 fcolor=0:0:0
    #~ d.font.freetype font="C:\Windows\Fonts\arial.ttf";
    #~ Weather="Weather stations";
    #~ echo $Weather > ${CASAS_HOME}/weather.txt;
    #~ d.text size=5 color=black at=3,90 input=${CASAS_HOME}/weather.txt;

    d.grid -w size=5:0:0 origin=0,0 color=grey bordercolor=black textcolor=black fontsize=25
    # d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=png
    #~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=eps

    d.barscale at=50,7
    d.mon stop=png
else
    # If flag -g is not checked, output is a color figure (with lakes)
    # Set png file for output.
    GRASS_RENDER_FILE="$SaveDir/WeatherStations.png"
    export GRASS_RENDER_FILE
    d.mon start=png
    d.erase

    d.his i=era40_67_270_10_grow h=natural_earth_color.composite
    #~ d.vect map=waterareas type=boundary,area \
    #~ color=0:255:255 fcolor=190:255:255
    d.vect map=admin0_10m_naturalEarth_MED type=boundary width=2
    #~ d.vect map=map$i display=shape icon=basic/point size=7 layer=1\
    #~ color=255:255:255 fcolor=0:0:0;
    #~ d.font.freetype font="C:\Windows\Fonts\arial.ttf";
    #~ Weather="Weather stations";
    #~ echo $Weather > ${CASAS_HOME}/weather.txt;
    #~ d.text size=5 color=black at=3,90 input=${CASAS_HOME}/weather.txt;

    d.grid -w size=5:0:0 origin=0,0 color=grey bordercolor=black textcolor=black fontsize=25
    # d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=png
    #~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=eps

    # Display scale bar.
    d.barscale at=50,7
    d.mon stop=png
fi

# Set default value with no upper cutting point.
if [ "$GIS_FLAG_U" -eq 0 ]; then
    HICUT='none'
fi

# Let HTML summary know if stations above altitude
# clip have been used in interpolation or not.
if [ "$GIS_FLAG_C" -eq 0 ]; then
    SurfCut='yes'
else
    SurfCut='no'
fi

# Write html pages.
perl ${PERLSCRIPTS}/htmlSum.pl "$SaveDir" "${LEG1}${LEG2}" "$PAR" "$CUT" "$HICUT" "$ALT" "$SurfCut" "$REG" "$Plots"
# If flag -p is checked, then make barchart plots.
if [ "$GIS_FLAG_P" -eq 1 ]; then
    #~ perl ${PERLSCRIPTS}/makePlotData.pl "$SaveDir"
    #~ perl ${PERLSCRIPTS}/HtmlPlotA_ita.pl "$SaveDir" "$LEG1 $LEG2";
    #~ perl ${PERLSCRIPTS}/HtmlPlotB.pl "$SaveDir" "$LEG1 $LEG2";
    perl ${PERLSCRIPTS}/HtmlPlotC.pl "$SaveDir" "${LEG1}${LEG2}"
fi

# One may want to save palette used for analysis.
if [ "$GIS_FLAG_G" -eq 1 ]; then
    if [ "$GIS_FLAG_X" -eq 1 ]; then
        cp ${PALETTES}/customColorRule.txt ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY
    else
        cp ${PALETTES}/greyColorRule ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY
    fi
else
    if [ "$GIS_FLAG_X" -eq 1 ]; then
        cp ${PALETTES}/customColorRule.txt ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY
    else
        cp ${PALETTES}/defaultColorRule ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY
    fi
fi

# How about saving also data used for analysis?
mkdir -p ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY/data/
cp ${OUTFILES}/*.txt ${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY/data/

# Perform final cleanup.
#~ cleanup

# Set default browser for HTML visual summary.
#GRASS_HTML_BROWSER=firefox.exe
GRASS_HTML_BROWSER=firefox
# Open HTML visual summary.
#$GRASS_HTML_BROWSER "file:///C:/cygwin/home/andy/outfiles/$GIS_OPT_SAVE_DIRECTORY/${LEG1}${LEG2}.html"
$GRASS_HTML_BROWSER "${OUTFILES}/$GIS_OPT_SAVE_DIRECTORY/${LEG1}${LEG2}.html"

exit 0
